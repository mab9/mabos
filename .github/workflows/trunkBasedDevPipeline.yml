name: Test, build and push Docker images to Dockerhub, deploy to latest to server

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      SPA_PROJECT: ./pwa

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Run Tests, Package and Build Docker Image with Maven
      run: mvn -B package --file pom.xml

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.10' # Use the Node.js version that matches your project requirements

    - name: Install npm dependencies
      run: npm install
      working-directory: ${{ env.SPA_PROJECT }}

    - name: Run linter
      run: npm run lint
      working-directory: ${{ env.SPA_PROJECT }}

    - name: Run tests
      run: npm run test:headless
      working-directory: ${{ env.SPA_PROJECT }}

    - name: Build Angular for production
      run: npm run build
      working-directory: ${{ env.SPA_PROJECT }}

    - name: Build Docker Image
      run: docker build -t mabru/mabos-spa:latest .
      working-directory: ${{ env.SPA_PROJECT }}

    - name: Push to Docker Registry
      run: |
        echo ${{ secrets.DOCKER_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push mabru/mabos-backent
        docker push mabru/mabos-spa

  deploy:
    name: Deploy images
    runs-on: ubuntu-latest
    needs: build # waiting on build job before deploying

    steps:

    - name: Pull and start new images on server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOY_SSH_HOST }}
        username: ${{ secrets.DEPLOY_SSH_USER }}
        key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
        port: ${{ secrets.DEPLOY_SSH_PORT }}
        # add folder /srv/<app-name> to let handle docker the networking.args.
        # no project will be inside the same folder.
        script: |
          cd ${{ secrets.DEPLOY_WORK_DIR }} &&
          docker compose --env-file ./deployment/.secrets.server.env pull &&
          docker compose --env-file ./deployment/.secrets.server.env up -d &&
          exit
